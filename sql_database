Produce a list of start times for bookings by members named 'David Farrell'?

SELECT
    b.start_time
FROM
    members m JOIN
    bookings b ON (m.id = b.member_id)
WHERE first_name = 'David' AND surname = 'Farrell';

---------------------------------
Produce a list of the start times for bookings for tennis courts, for the date '2012-09-21'? Return a list of start time and facility name pairings, ordered by the time.

SELECT
    b.start_time, f.name
FROM
    facilities f JOIN
    bookings b ON (f.id = b.facility_id)
WHERE f.name LIKE 'Tennis C%' AND b.start_time >= '2012-09-21' AND b.start_time <= '2012-09-22';
 -------------------------------
Produce a list of all members who have used a tennis court? Include in your output the name of the court, and the name of the member formatted as first name, surname. Ensure no duplicate data, and order by the first name.
************look here for JOIN syntax of multiple tables! *******************

SELECT DISTINCT m.first_name, m.surname, f.name
 FROM
   members m JOIN
   bookings b ON (m.id = b.member_id) JOIN
   facilities f ON (f.id = b.facility_id)
 WHERE
   f.name LIKE 'Tennis C%'
 ORDER BY m.first_name;

 -------------------------------
 Produce a number of how many times Nancy Dare has used the pool table facility?

 SELECT  count(f.name)
  FROM
    members m JOIN
    bookings b ON (m.id = b.member_id) JOIN
    facilities f ON (f.id = b.facility_id)
  WHERE
    m.first_name = 'Nancy' AND m.surname = 'Dare' AND f.name = 'Pool Table';


----------------------------------------------------
Produce a list of how many times Nancy Dare has visited each country club facility.

WITH visited AS(
 SELECT  m.first_name, m.surname, f.name, b.start_time
  FROM
    members m JOIN
    bookings b ON (m.id = b.member_id) JOIN
    facilities f ON (f.id = b.facility_id)
  WHERE
    m.first_name = 'Nancy' AND m.surname = 'Dare')

  SELECT visited.first_name,  visited.name, count(visited.name),visited.surname
  FROM visited
  GROUP BY visited.name, visited.first_name, visited.surname
  ORDER BY count(visited.name) DESC;

Produce a list of all members who have recommended another member? Ensure that there are no duplicates in the list, and that results are ordered by (surname, firstname).

SELECT DISTINCT m2.first_name, m2.surname
 FROM
   members m JOIN
   members m2 ON(m.recommended_by = m2.id)
 WHERE
   m.recommended_by IS NOT NULL
  ORDER BY m2.surname;


----------------------------------------------------------

Output a list of all members, including the individual who recommended them (if any), without using any JOINs? Ensure that there are no duplicates in the list, and that member is formatted as one column and ordered by member.

Hint: To concatenate two columns to look like one you can use the ||
Example: SELECT DISTINCT ... || ' ' || ... AS ...,
Hint: See Subqueries Here and Here
Example:
SELECT DISTINCT ... || ' ' ||  ... AS ....,
    (SELECT ... || ' ' || ... AS ....
        FROM ... ...
        WHERE ... = ...
    ) FROM ... ...


    SELECT p.product_id, p.product_name
FROM products p
WHERE p.category_id IN
   (SELECT c.category_id
    FROM categories c
    WHERE c.category_id > 25
    AND c.category_name like 'S%');

    SELECT DISTINCT m.first_name, m.surname, m.recommended_by AS test
    FROM members m
   WHERE m.recommended_by IN
   (SELECT m2.id AS test2
    FROM members m2
    WHERE m2.id > -1);

    SELECT DISTINCT m.first_name, m.surname, m.recommended_by AS test
      (SELECT m2.id AS test2
      FROM members m2
      WHERE m2.id > -1) FROM

SELECT DISTINCT first_name || ' ' || surname AS member, recommended_by AS id_of_recommender,
(SELECT first_name || ' ' || surname AS recommender

 FROM members WHERE id_of_recommender = id) FROM members;




    SELECT DISTINCT ... || ' ' ||  ... AS ....,
        (SELECT ... || ' ' || ... AS ....
            FROM ... ...
            WHERE ... = ...
        ) FROM ... ...


        SELECT m1.first_name,
          (SELECT recommended_by
           FROM members m2
           WHERE m1.recommended_by= m2.id) recommender_id
        FROM members m1;

        SELECT p1.product_name,
  (SELECT MAX(product_id)
   FROM products p2
   WHERE p1.product_id = p2.product_id) subquery2
FROM products p1;






SELECT
    t.title, t.description, t.status, c.content
FROM
    tasks t JOIN
    comments c ON (t.id = c.task_id);


    Step.joins(:project => :project_collection)
        .where(project_collections: { collection_id: @collection.id })
        .pluck(:'steps.id')


    Task.joins(:comment => :comments)
    .where(comments: {task_id: task})


    id = 4
    task = Task.find(id)
    puts task.id
    puts task.title
    puts task.description
    puts task.status

    comment = Comment.find_by_task_id(id)
    puts comment.content

*** This prints all task ids, titles and descriptions along with the comments for each


    Task.all.each do |t|
     print "id is #{t.id}  "
     print t.title + ":  "
     print t.description
      t.comments.each do |c|
      puts c.content
      end
    end



Task.count
for id in 1..100 do
   puts "Hello world, this is number #{current_iteration_number}"
end



2.3.1 :229 > comment5 = Comment.where(task_id:5)

2.3.1 :230 > comment5
  Comment Load (0.2ms)  SELECT  "comments".* FROM "comments" WHERE "comments"."task_id" = $1 LIMIT $2  [["task_id", "5"], ["LIMIT", 11]]
 => #<ActiveRecord::Relation [#<Comment id: 2, content: "This is a comment to task with id of 5", task_id: "5", created_at: "2017-07-07 20:57:48", updated_at: "2017-07-07 20:57:48">, #<Comment id: 3, content: "Try another one", task_id: "5", created_at: "2017-07-07 20:59:16", updated_at: "2017-07-07 20:59:16">]>
2.3.1 :231 > comment5.length

 => 2
2.3.1 :232 > comment5[0]
 => #<Comment id: 2, content: "This is a comment to task with id of 5", task_id: "5", created_at: "2017-07-07 20:57:48", updated_at: "2017-07-07 20:57:48">
2.3.1 :233 > comment5[0].content
 => "This is a comment to task with id of 5"
2.3.1 :234 > comment5[1].content
 => "Try another one"
2.3.1 :235 >
